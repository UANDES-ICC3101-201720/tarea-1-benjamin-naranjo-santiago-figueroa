Benjamín Naranjo
Santiago Figueroa

*Descripción de algoritmo:
Nuestro algoritmo de búsqueda binaria usa como base el sistema de búsqueda binaria serial:
Con la primera y la última posición entregados como variables, las suma y divide por 2 para poder obtener la posición de la mitad.
Si el valor buscado es inferior al valor de la mitad se queda con la mitad inferior de lo contrario se queda con la mitad superior.
Repite el proceso.
 int binsearch(int x, int val[], int n){
    int low = 0, high = n-1, mid;
    while (low < high){
        mid = (low+high)/2;
        if (x < val[mid])
            high = mid - 1;
        else if (x > val[mid])
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}
El algoritmo paralelo divide el arreglo dependiendo de la cantidad de nucleos que se tiene.
Luego se utiliza la misma cantidad de threads que los nucleos y se le entrega mediante threads los arreglos a cada uno.

parallel_binsearch(unsigned int arr[], int l, int h, int x){
  pthread_t threads[max_threads];
  int thread_p = h / max_threads;
  int counter = 1;

  for(int i = 0; i < max_threads; i++){
    data *info = malloc(sizeof(data));
    info->arr = arr;
    info->l = l;
    info->x = position;
    info->h = (thread_p * mult) - 1;
    if (pthread_create(&m_tid[i], NULL, (void *)binsearch, info))
    {
        free(info);
    }
    l = thread_p * counter;
    counter+1;
  }


*Analisis de Resultados:

*Conclusiones:
El paralelismo puede dividir el problema en procesos más pequeños, sin embargo no siempre puede ser la mejor opcion ya que puede colapsar el sistema.


*Problemas encontrados y limitaciones:

Se encontraron algunos problemas en el programa desde el comienzo.
Primero, el programa no compilaba si es que no se ejecutaba el flag -lm. Por otro lado, había problemas con el clock ya que este funcionaba de manera distinta a como nosotros lo requeríamos. Este al empezar un nuevo proceso, si es que se estaban ejecutando distintos programas exteriores a mi espacio de trabajo, interferían en la medición de los resultados.
Segundo, se tuvieron problemas con la implementación de los sockets. Los cuales solamente el programa datasearch.c lo tenía bien implementado para su lectura y escritura, en cambio, para binsearch.c en donde uno debía encargarse de la implementación del socket se obtenían ciertos problemas.
Tercero, una limitación importante es cuando se le ingresaba un valor de T muy grande (6), ya que la búsqueda en paralelo se sobrecargaba con demasiados threads y esto podía producir problemas dependiendo del procesador que se tenía.
